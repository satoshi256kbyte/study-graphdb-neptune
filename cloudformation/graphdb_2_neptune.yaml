AWSTemplateFormatVersion: "2010-09-09"
Description: 
  "Neptune"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Common parameters"
        Parameters: 
          - "ServiceName"
          - "StageName"
      - 
        Label: 
          default: "Bastion parameters"
        Parameters: 
          - "BastionCidrIp"
          - "BastionInstanceType"
          - "BastionKeyPairName"
          - "VolumeSize"
          - "BastionKeyEc2ImageId"
      - 
        Label: 
          default: "Neptune parameters"
        Parameters: 
          - "DbInstanceType"
          - "DBClusterPort"
          - "NotebookInstanceType"
      -
        Label: 
          default: "Tom Sawyer parameters"
        Parameters: 
          - "TomSawyerCidrIp"
        
Parameters: 
  #----------------------------------------
  # Common parameters
  #---------------------------------------- 
  ServiceName: 
    Description: "Service name"
    Type: "String"
    Default: "graphdb"
  StageName: 
    Description: "Stage name"
    Type: "String"
    Default: "develop"
    AllowedValues: 
      - "develop"
      - "stg"
      - "prod"

  #----------------------------------------
  # Bastion parameters
  #---------------------------------------- 
  BastionCidrIp:
    Description: "IP address range that can access the bastion host"
    Type: "String"
    Default: "0.0.0.0/0"
  BastionInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t4g.micro
    AllowedValues:
      - t4g.micro
      - t4g.small
      - t4g.medium
    ConstraintDescription: must be a valid EC2 instance type.
    AllowedPattern: ".+"
  BastionKeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    AllowedPattern: ".+"
  VolumeSize:
    Type: Number
    Description: Root volume size in GB
    Default: "50"
    MinValue: "1"
    MaxValue: "1000"
    ConstraintDescription: must be between 1 and 1000 GB.
  BastionKeyEc2ImageId:
      Description: AMI ID of the EC2 instance
      Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
      Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
      AllowedPattern: ".+"

  #----------------------------------------
  # Neptune parameters
  # 参考：https://docs.aws.amazon.com/ja_jp/neptune/latest/userguide/get-started-cfn-create.html
  #----------------------------------------
  DbInstanceType:
    Description: Neptune DB instance type
    Type: String
    Default: db.t4g.medium
    AllowedValues:
      - db.t4g.medium
      - db.t3.medium
    ConstraintDescription: >-
      Must be a valid Neptune instance type. Note that for Stockholm and OSU
      only R5 and T3 instances are available.
  DBClusterPort:
    Type: String
    Default: "8182"
    Description: Enter the port of your Neptune cluster
  NotebookInstanceType:
    Description: >-
      SageMaker Notebook instance type. Please refer
      https://aws.amazon.com/sagemaker/pricing/ for uptodate allowed instance
      type in aws region and https://aws.amazon.com/neptune/pricing/ for
      pricing.
    Type: String
    Default: ml.t3.medium
    AllowedValues:
      - none
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
    ConstraintDescription: Must be a valid SageMaker instance type.

  #----------------------------------------
  # Tom Sawyer parameters
  #--------------------------------------
  TomSawyerCidrIp:
    Description: "IP address range that can access the Tom Sawyer host"
    Type: "String"
    Default: "0.0.0.0/0"

Resources:
  # ------------------------------------------------------------#
  #  Security Group
  # ------------------------------------------------------------#
  BastionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ServiceName}-${StageName}-neptune-bastion-sg"
      GroupDescription: "Enable access to Notebook"
      VpcId: !ImportValue 
        Fn::Sub: "${ServiceName}-${StageName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionCidrIp
      Tags:
        - Key: "Name"
          Value: !Sub "${ServiceName}-${StageName}-neptune-bastion-sg"
        - Key: "ServiceName"
          Value: !Ref ServiceName
        - Key: "StageName"
          Value: !Ref StageName
          
  NotebookSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ServiceName}-${StageName}-neptune-notebook-sg"
      GroupDescription: "Enable access to Notebook"
      VpcId: !ImportValue 
        Fn::Sub: "${ServiceName}-${StageName}-vpc"
      Tags:
        - Key: "Name"
          Value: !Sub "${ServiceName}-${StageName}-neptune-notebook-sg"
        - Key: "ServiceName"
          Value: !Ref ServiceName
        - Key: "StageName"
          Value: !Ref StageName

  TomSawyerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ServiceName}-${StageName}-neptune-tomsawyer-sg"
      GroupDescription: "Enable access to Notebook"
      VpcId: !ImportValue 
        Fn::Sub: "${ServiceName}-${StageName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TomSawyerCidrIp
      Tags:
        - Key: "Name"
          Value: !Sub "${ServiceName}-${StageName}-neptune-tomsawyer-sg"
        - Key: "ServiceName"
          Value: !Ref ServiceName
        - Key: "StageName"
          Value: !Ref StageName

  NeptuneSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ServiceName}-${StageName}-neptune-cluster-sg"
      GroupDescription: "Enable access to Neptune"
      VpcId: !ImportValue 
        Fn::Sub: "${ServiceName}-${StageName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          SourceSecurityGroupId: !Ref NotebookSecurityGroup
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          SourceSecurityGroupId: !Ref TomSawyerSecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${ServiceName}-${StageName}-neptune-cluster-sg"
        - Key: "ServiceName"
          Value: !Ref ServiceName
        - Key: "StageName"
          Value: !Ref StageName

  # ------------------------------------------------------------#
  #  踏み台サーバー
  # ------------------------------------------------------------#
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionInstanceType
      SubnetId: !ImportValue
        Fn::Sub: "${ServiceName}-${StageName}-subnet-public-1"
      ImageId: !Ref BastionKeyEc2ImageId
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      IamInstanceProfile: !Ref BastionInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
      EbsOptimized: false
      SourceDestCheck: false
      KeyName: !Ref BastionKeyPairName
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
        - Key: Name
          Value: !Sub ${ServiceName}-${StageName}-bastion-instance

  BastionServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-${StageName}-bastion-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SSMGetParametersPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BastionServerRole
      InstanceProfileName: !Sub ${ServiceName}-${StageName}-bastion-instance-profile

  BastionElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
        - Key: Name
          Value: !Sub ${ServiceName}-${StageName}-bastion-eip

  BastionElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref BastionElasticIP
      InstanceId: !Ref BastionInstance

  # ------------------------------------------------------------#
  #  Neptune
  # ------------------------------------------------------------#
  NeptuneDBCluster:
    Type: "AWS::Neptune::DBCluster"
    Properties:
      DBClusterIdentifier: !Sub "${ServiceName}-${StageName}-neptune-cluster"
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      DBPort: !Ref DBClusterPort  # 本当は任意入力だが個人的に書いた方がわかりやすいので記述
      Port: !Ref DBClusterPort  # 本当は任意入力だが個人的に書いた方がわかりやすいので記述
      # IamAuthEnabled: True
      StorageEncrypted: True
      VpcSecurityGroupIds: 
        - !GetAtt NeptuneSecurityGroup.GroupId
      Tags: 
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-cluster"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
  
  NeptuneDBInstance:
    Type: "AWS::Neptune::DBInstance"
    Properties:
      DBInstanceIdentifier: !Sub "${ServiceName}-${StageName}-neptune-instance"
      DBInstanceClass: !Ref DbInstanceType
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      DBClusterIdentifier: !Ref NeptuneDBCluster
      Tags:
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-instance"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

  NeptuneDBSubnetGroup:
    Type: "AWS::Neptune::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "${ServiceName}-${StageName}-neptune-cluster-subnet-group"
      SubnetIds: 
        - !ImportValue 
          Fn::Sub: "${ServiceName}-${StageName}-subnet-public-1"
        - !ImportValue 
          Fn::Sub: "${ServiceName}-${StageName}-subnet-public-2"
      Tags: 
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-cluster-subnet-group"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  # ------------------------------------------------------------#
  #  Notebook
  # ------------------------------------------------------------#
  NotebookRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ServiceName}-${StageName}-notebook-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${ServiceName}-${StageName}-notebook-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "neptune-db:*"
                # https://docs.aws.amazon.com/ja_jp/neptune/latest/userguide/iam-data-resources.html
                Resource:
                  !Sub
                    - arn:aws:neptune-db:${AWS::Region}:${AWS::AccountId}:${ClusterResourceId}/*
                    - ClusterResourceId: !GetAtt NeptuneDBCluster.ClusterResourceId
              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DeleteLogDelivery"
                  - "logs:Describe*"
                  - "logs:GetLogDelivery"
                  - "logs:GetLogEvents"
                  - "logs:ListLogDeliveries"
                  - "logs:PutLogEvents"
                  - "logs:PutResourcePolicy"
                  - "logs:UpdateLogDelivery"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-notebook-role"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName

  NeptuneSagemakerNotebook:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      NotebookInstanceName: !Sub "${ServiceName}-${StageName}-neptune-notebook"
      InstanceType: !Ref NotebookInstanceType
      RoleArn: !GetAtt NotebookRole.Arn
      RootAccess: Enabled
      SecurityGroupIds: 
        - !Ref NotebookSecurityGroup
      SubnetId: !ImportValue 
        Fn::Sub: "${ServiceName}-${StageName}-subnet-private-1"
      Tags: 
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-notebook"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
