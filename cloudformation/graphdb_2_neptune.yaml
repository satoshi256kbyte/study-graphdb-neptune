AWSTemplateFormatVersion: "2010-09-09"
Description: 
  "Getting started with Amazon Neptune - your first graph DB"

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Common parameters"
        Parameters: 
          - "ServiceName"
          - "StageName"
      - 
        Label: 
          default: "Neptune parameters"
        Parameters: 
          - "DbInstanceType"
          - "DBClusterPort"
        
Parameters: 
  #----------------------------------------
  # Common parameters
  #---------------------------------------- 
  ServiceName: 
    Description: "Service name"
    Type: "String"
    Default: "graphdb"
  StageName: 
    Description: "Stage name"
    Type: "String"
    Default: "develop"
    AllowedValues: 
      - "develop"
      - "stg"
      - "prod"

  #----------------------------------------
  # Neptune parameters
  # 参考：https://docs.aws.amazon.com/ja_jp/neptune/latest/userguide/get-started-cfn-create.html
  #----------------------------------------
  DbInstanceType:
    Description: Neptune DB instance type
    Type: String
    Default: db.t4g.medium
    AllowedValues:
      - db.t4g.medium
      - db.t3.medium
    ConstraintDescription: >-
      Must be a valid Neptune instance type. Note that for Stockholm and OSU
      only R5 and T3 instances are available.
  DBClusterPort:
    Type: String
    Default: "8182"
    Description: Enter the port of your Neptune cluster

Resources:
  # ------------------------------------------------------------#
  #  Neptune
  # ------------------------------------------------------------#
  NeptuneDBCluster:
    Type: "AWS::Neptune::DBCluster"
    Properties:
      DBClusterIdentifier: !Sub "${ServiceName}-${StageName}-neptune-cluster"
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      DBPort: !Ref DBClusterPort  # 本当は任意入力だが個人的に書いた方がわかりやすいので記述
      Port: !Ref DBClusterPort  # 本当は任意入力だが個人的に書いた方がわかりやすいので記述
      # IamAuthEnabled: True
      StorageEncrypted: True
      VpcSecurityGroupIds: 
        - Fn::ImportValue: 
            Fn::Sub: "${ServiceName}-${StageName}-neptune-cluster-sg"
      Tags: 
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-cluster"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
  
  NeptuneDBInstance:
    Type: "AWS::Neptune::DBInstance"
    Properties:
      DBInstanceIdentifier: !Sub "${ServiceName}-${StageName}-neptune-instance"
      DBInstanceClass: !Ref DbInstanceType
      DBSubnetGroupName: !Ref NeptuneDBSubnetGroup
      DBClusterIdentifier: !Ref NeptuneDBCluster
      Tags:
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-instance"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain

  NeptuneDBSubnetGroup:
    Type: "AWS::Neptune::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "${ServiceName}-${StageName}-neptune-cluster-subnet-group"
      SubnetIds: 
        - Fn::ImportValue: 
            Fn::Sub: "${ServiceName}-${StageName}-subnet-private-1" 
        - Fn::ImportValue:
            Fn::Sub: "${ServiceName}-${StageName}-subnet-private-2"
      Tags: 
        - Key: Name
          Value: !Sub "${ServiceName}-${StageName}-neptune-cluster-subnet-group"
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StageName
          Value: !Ref StageName
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

Outputs:
  NeptuneDBClusterClusterResourceId:
    Description: "Neptune DB Cluster Resource ID"
    Value: !GetAtt NeptuneDBCluster.ClusterResourceId
    Export:
      Name: !Sub "${ServiceName}-${StageName}-neptune-cluster-resource-id"